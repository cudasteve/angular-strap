{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","titleTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","isNative","TooltipFactory","promise","$tooltip","$bsCompiler","compile","options","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","scope","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","element","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","extend","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","then","data","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","link","clonedElement","animation","addClass","prefixClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","replace","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","blur","stopPropagation","forEach","directive","$root","$digest","restrict","query","querySelectorAll","isString","tooltip","transclusion","falseValueRegExp","key","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on"],"mappings":"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","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}